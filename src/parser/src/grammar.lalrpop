use std::str::FromStr;
use base::ast;
use base::types::Location;
use lalrpop_util::ParseError;

grammar;

Comma: () = {
    "," => (),
    // <!> => ()
    // <!> => errors.push(<>.error)
};

Semicolon: () = {
    ";" => (),
    // <!> => ()
    // <!> => errors.push(<>.error)
};

Empty: () = {
    "" => (),
    // <!> => ()
    // <!> => errors.push(<>.error)
};

LocatedList<Rule, Separator>: Vec<Rule> =
  <list: (<Rule> <Separator>)*> <last: Rule?> => {
    let mut rules = Vec::new();
    for (rule, sep) in list {
      rules.push(rule);
    }
    match last {
      Some(rule) => rules.push(rule),
      _ => (),
    }
    rules
  };

List<Rule, Separator>: Vec<Rule> =
  <list: (<Rule> <Separator>)*> <last: Rule?> => {
    let mut rules = Vec::new();
    for (rule, sep) in list {
      rules.push(rule);
    }
    match last {
      Some(rule) => rules.push(rule),
      _ => (),
    }
    rules
  };

ListNoSep<Rule>: Vec<Rule> =
  <list: (<Rule>)*> => {
    let mut rules = Vec::new();
    for rule in list {
      rules.push(rule);
    }
    rules
  };

// -------------------  TYPES  -------------------
pub Type: ast::Type = {
    "int"     => ast::Type::Int,  // Int
    "string"  => ast::Type::Str,  // Str
    "boolean" => ast::Type::Bool, // Boolean
    "void"    => ast::Type::Void, // Void
};

// ------------------- PROGRAM -------------------

pub Program: ast::Program = {
  <defs: ListNoSep<TopDef>> => ast::Program { <> }, // Program
};

pub TopDef: ast::FnDef = {
  <loc_1: @L> <ty: Type> <loc_2: @R> <loc_3: @L> <ident: PIdent> <loc_4: @R> "(" <args: List<Arg, Comma>> ")" <block: Block> => ast::FnDef {
      ty,
      ty_loc: Location::new(loc_1, loc_2),
      ident,
      ident_loc: Location::new(loc_3, loc_4),
      args,
      block,
  }, // FnDef
};

pub Arg: ast::Arg = {
  <loc_1: @L> <ty: Type> <loc_2: @R> <loc_3: @L> <ident: PIdent> <loc_4: @R> => ast::Arg {
      ty,
      ty_loc: Location::new(loc_1, loc_2),
      ident,
      ident_loc: Location::new(loc_3, loc_4),
  }, // Arg
};

pub Block: ast::Block = {
    "{" <stmts: ListNoSep<Stmt>> <loc_end: @R> "}" => ast::Block {
        stmts,
        end_loc: Location::new(loc_end, loc_end),
    }, // Block
};

// ------------------- STATEMENTS -------------------
// Grammar got modified to avoid conflicts using method des\]cribed here:
// https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers

pub Stmt: ast::Stmt = {
    OpenStmt,
    ClosedStmt,
};

pub OpenStmt: ast::Stmt = {
  <_beg: @L>
      "if" "(" <expr: Expr> ")" <stmt: SimpleStmt>
  <_end: @R> => {
      let blk;
      match stmt.value {
          ast::StmtTypes::BStmt { block } => { blk = block.clone() },
          _ => {
              blk = ast::Block {
                  stmts: vec![stmt.clone()],
                  end_loc: Location::new(stmt.all_loc.end, stmt.all_loc.end),
              };
          }
      }

      ast::Stmt {
          all_loc: Location::new(_beg, _end),
          value: ast::StmtTypes::Cond {
              expr,
              block: blk,
          },
      }
  }, // Cond

  <_beg: @L>
      "if" "(" <expr: Expr> ")" <stmt: OpenStmt>
  <_end: @R> => {
      let blk;
      match stmt.value {
          ast::StmtTypes::BStmt { block } => { blk = block.clone() },
          _ => {
              blk = ast::Block {
                  stmts: vec![stmt.clone()],
                  end_loc: Location::new(stmt.all_loc.end, stmt.all_loc.end),
              };
          }
      }

      ast::Stmt {
          all_loc: Location::new(_beg, _end),
          value: ast::StmtTypes::Cond {
              expr,
              block: blk,
          },
      }
  }, // Cond

  <_beg: @L>
    "if" "(" <expr: Expr> ")" <stmt_true: ClosedStmt> "else" <stmt_false: OpenStmt>
  <_end: @R> => {
      let blk_true;
      match stmt_true.value {
          ast::StmtTypes::BStmt { block } => { blk_true = block.clone() },
          _ => {
              blk_true = ast::Block {
                  stmts: vec![stmt_true.clone()],
                  end_loc: Location::new(stmt_true.all_loc.end, stmt_true.all_loc.end),
              };
          }
      }

      let blk_false;
      match stmt_false.value {
          ast::StmtTypes::BStmt { block } => { blk_false = block.clone() },
          _ => {
              blk_false = ast::Block {
                  stmts: vec![stmt_false.clone()],
                  end_loc: Location::new(stmt_false.all_loc.end, stmt_false.all_loc.end),
              };
          }
      }

      ast::Stmt {
          all_loc: Location::new(_beg, _end),
          value: ast::StmtTypes::CondElse {
              expr,
              block_true: blk_true,
              block_false: blk_false,
          },
      }
  }, // CondElse

  <_beg: @L>
    "while" "(" <expr: Expr> ")" <stmt: OpenStmt>
  <_end: @R> => {
      let blk;
      match stmt.value {
          ast::StmtTypes::BStmt { block } => { blk = block.clone() },
          _ => {
              blk = ast::Block {
                  stmts: vec![stmt.clone()],
                  end_loc: Location::new(stmt.all_loc.end, stmt.all_loc.end),
              };
          }
      }

      ast::Stmt {
          all_loc: Location::new(_beg, _end),
          value: ast::StmtTypes::While {
              expr,
              block: blk,
          },
      }
  }, // While
};

pub ClosedStmt: ast::Stmt = {
  SimpleStmt,

  <_beg: @L>
    "if" "(" <expr: Expr> ")" <stmt_true: ClosedStmt> "else" <stmt_false: ClosedStmt>
  <_end: @R> => {
      let blk_true;
      match stmt_true.value {
          ast::StmtTypes::BStmt { block } => { blk_true = block.clone() },
          _ => {
              blk_true = ast::Block {
                  stmts: vec![stmt_true.clone()],
                  end_loc: Location::new(stmt_true.all_loc.end, stmt_true.all_loc.end),
              };
          }
      }

      let blk_false;
      match stmt_false.value {
          ast::StmtTypes::BStmt { block } => { blk_false = block.clone() },
          _ => {
              blk_false = ast::Block {
                  stmts: vec![stmt_false.clone()],
                  end_loc: Location::new(stmt_false.all_loc.end, stmt_false.all_loc.end),
              };
          }
      }

      ast::Stmt {
          all_loc: Location::new(_beg, _end),
          value: ast::StmtTypes::CondElse {
              expr,
              block_true: blk_true,
              block_false: blk_false,
          },
      }
  }, // CondElse

  <_beg: @L>
    "while" "(" <expr: Expr> ")" <stmt: ClosedStmt>
  <_end: @R> => {
      let blk;
      match stmt.value {
          ast::StmtTypes::BStmt { block } => { blk = block.clone() },
          _ => {
              blk = ast::Block {
                  stmts: vec![stmt.clone()],
                  end_loc: Location::new(stmt.all_loc.end, stmt.all_loc.end),
              };
          }
      }

      ast::Stmt {
          all_loc: Location::new(_beg, _end),
          value: ast::StmtTypes::While {
              expr,
              block: blk,
          },
      }
  }, // While
};

pub SimpleStmt: ast::Stmt = {
  <_beg: @L>
    ";"
  <_end: @R> => ast::Stmt {
      all_loc: Location::new(_beg, _end),
      value: ast::StmtTypes::Empty,
  }, // Empty

  <_beg: @L>
    <block: Block>
  <_end: @R> => ast::Stmt {
      all_loc: Location::new(_beg, _end),
      value: ast::StmtTypes::BStmt {
          block,
      }
  }, // BStmt

  <_beg: @L>
    <loc_1: @L> <ty: Type> <loc_2: @R> <items: List<Item, Comma>> ";"
  <_end: @R> => ast::Stmt {
      all_loc: Location::new(_beg, _end),
      value: ast::StmtTypes::Decl {
          ty,
          ty_loc: Location::new(loc_1, loc_2),
          items,
      },
  }, // Decl

  <_beg: @L>
    <loc_1: @L> <ident: PIdent> <loc_2: @R> "=" <expr: Expr> ";"
  <_end: @R> => ast::Stmt {
      all_loc: Location::new(_beg, _end),
      value: ast::StmtTypes::Ass {
          ident,
          ident_loc: Location::new(loc_1, loc_2),
          expr,
      },
  }, // Ass

  <_beg: @L>
    <loc_1: @L> <ident: PIdent> <loc_2: @R> "++" ";"
  <_end: @R> => ast::Stmt {
      all_loc: Location::new(_beg, _end),
      value: ast::StmtTypes::Incr {
          ident,
          ident_loc: Location::new(loc_1, loc_2),
      },
  }, // Incr

  <_beg: @L>
    <loc_1: @L> <ident: PIdent> <loc_2: @R> "--" ";"
  <_end: @R> => ast::Stmt {
      all_loc: Location::new(_beg, _end),
      value: ast::StmtTypes::Decr {
          ident,
          ident_loc: Location::new(loc_1, loc_2),
      },
  }, // Decr

  <_beg: @L>
    <loc_1: @L> "return" <loc_2: @R> <expr: Expr> ";"
  <_end: @R> => ast::Stmt {
      all_loc: Location::new(_beg, _end),
      value: ast::StmtTypes::Ret {
          ret_loc: Location::new(loc_1, loc_2),
          value: Some(expr),
      },
  }, // Ret

  <_beg: @L>
    <loc_1: @L> "return" <loc_2: @R> ";"
  <_end: @R> => ast::Stmt {
      all_loc: Location::new(_beg, _end),
      value: ast::StmtTypes::Ret {
          ret_loc: Location::new(loc_1, loc_2),
          value: None,
      },
  }, // VRet

  <_beg: @L>
    <expr: Expr> ";"
  <_end: @R> => ast::Stmt {
      all_loc: Location::new(_beg, _end),
      value: ast::StmtTypes::SExp {
          expr,
      },
  }, // SExp
};

pub Item: ast::Item = {
    <loc_1: @L> <ident: PIdent> <loc_2: @R> => ast::Item {
        ident,
        ident_loc: Location::new(loc_1, loc_2),
        value: None,
    }, // NoInit

    <loc_1: @L> <ident: PIdent> <loc_2: @R> "=" <loc_3: @L> <expr: Expr> <loc_4: @R> => ast::Item {
        ident,
        ident_loc: Location::new(loc_1, loc_2),
        value: Some(expr),
    }, // Init
};

// ------------------- EXPRESSIONS -------------------

pub Expr: ast::Expr = {
  <_beg: @L>
    <expr1: Expr1> "||" <expr2: Expr>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::EOr {
          expr1: Box::new(expr1),
          expr2: Box::new(expr2),
      },
  }, // EOr

  Expr1,
};

pub Expr1: ast::Expr = {
  <_beg: @L>
    <expr1: Expr2> "&&" <expr2: Expr1>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::EAnd {
          expr1: Box::new(expr1),
          expr2: Box::new(expr2),
      },
  }, // EAnd

  Expr2,
};

pub Expr2: ast::Expr = {
  <_beg: @L>
    <expr1: Expr2> <loc_1: @L> <op: RelOp> <loc_2: @R> <expr2: Expr3>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::ERel {
          op,
          op_loc: Location::new(loc_1, loc_2),
          expr1: Box::new(expr1),
          expr2: Box::new(expr2),
      },
  }, // ERel

  Expr3,
};

pub Expr3: ast::Expr = {
  <_beg: @L>
    <expr1: Expr3> <loc_1: @L> <op: AddOp> <loc_2: @R> <expr2: Expr4>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::EAdd {
          op,
          op_loc: Location::new(loc_1, loc_2),
          expr1: Box::new(expr1),
          expr2: Box::new(expr2),
      },
  }, // EAdd

  Expr4,
};

pub Expr4: ast::Expr = {
  <_beg: @L>
    <expr1: Expr4> <loc_1: @L> <op: MulOp> <loc_2: @R> <expr2: Expr5>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::EMul {
          op,
          op_loc: Location::new(loc_1, loc_2),
          expr1: Box::new(expr1),
          expr2: Box::new(expr2),
      },
  }, // EMul

  Expr5,
};

pub Expr5: ast::Expr = {
  <_beg: @L>
    "-" <expr: Expr5>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::ENeg {
          expr: Box::new(expr),
      },
  }, // Neg

  <_beg: @L>
    "!" <expr: Expr6>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::ENot {
          expr: Box::new(expr),
      },
  }, // Not

  Expr6,
};

pub Expr6: ast::Expr = {
  <_beg: @L>
    <loc_1: @L> <ident: PIdent> <loc_2: @R>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::EVar {
          ident,
          ident_loc: Location::new(loc_1, loc_2),
      },
  }, // EVar

  <_beg: @L>
    <value: PInteger>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::ELitInt {
          value,
      },
  }, // ELitInt

  <_beg: @L>
    "true"
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::ELitTrue {},
  }, // ELitTrue

  <_beg: @L>
    "false"
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::ELitFalse {},
  }, // ELitFalse

  <_beg: @L>
    <loc_1: @L> <ident: PIdent> <loc_2: @R> "(" <loc_3: @L> <args: List<Expr, Comma>> <loc_4: @R>  ")"
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::EApp {
          ident,
          ident_loc: Location::new(loc_1, loc_2),
          args,
          args_loc: Location::new(loc_3, loc_4),
      },
  }, // EApp

  <_beg: @L>
    <value: PString>
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: ast::ExprTypes::EString {
          value,
      },
  }, // EString

  <_beg: @L>
    "(" <expr: Expr> ")"
  <_end: @R> => ast::Expr {
      all_loc: Location::new(_beg, _end),
      value: expr.value,
  },
};

// ------------------- Operators -------------------

pub AddOp: ast::Operator = {
    "+" => ast::Operator::ArithmOp(ast::ArithmOp::Plus),  // Plus
    "-" => ast::Operator::ArithmOp(ast::ArithmOp::Minus), // Minus
};

pub MulOp: ast::Operator = {
    "*" => ast::Operator::ArithmOp(ast::ArithmOp::Times), // Times
    "/" => ast::Operator::ArithmOp(ast::ArithmOp::Div),   // Div
    "%" => ast::Operator::ArithmOp(ast::ArithmOp::Mod),   // Mod
};

pub RelOp: ast::Operator = {
    "<"  => ast::Operator::RelOp(ast::RelOp::LT), // LT
    "<=" => ast::Operator::RelOp(ast::RelOp::LE), // LE
    ">"  => ast::Operator::RelOp(ast::RelOp::GT), // GT
    ">=" => ast::Operator::RelOp(ast::RelOp::GE), // GE
    "==" => ast::Operator::RelOp(ast::RelOp::EQ), // EQ
    "!=" => ast::Operator::RelOp(ast::RelOp::NE), // NE
};

// ------------------- BASIC PARSING TYPES -------------------

pub PInteger: i32 = {
    r"\d+" =>? i32::from_str(<>).map_err(|_| ParseError::User{ error: "integer overflow" }),
};

pub PIdent: String = {
    r"[a-zA-Z][[:word:]]*" => String::from(<>),
};

pub PString: String = {
    r#""(\\"|[[:print:]--"])*""# => {
        // remove apostrophes from the beginning and the end of string
        let s = String::from(<>);
        let r = s.chars()
         .skip(1)
         .take(s.len() - 2)
         .collect();
        r
  },
};
